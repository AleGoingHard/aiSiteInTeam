@{
    ViewData["Title"] = "Home Page";
}

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: #0a0a0a;
        color: #ffffff;
        overflow-x: hidden;
        line-height: 1.6;
    }

    /* 3D Canvas Background */
    #canvas3d {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        pointer-events: none;
    }

    /* Navigation Header */
    .navbar {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        z-index: 1000;
        background: rgba(10, 10, 10, 0.85);
        backdrop-filter: blur(25px);
        border-bottom: 1px solid rgba(64, 224, 208, 0.15);
        padding: 20px 0;
        transition: all 0.3s ease;
        box-shadow: 0 2px 20px rgba(0, 0, 0, 0.3);
    }

    .nav-container {
        max-width: 1400px;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 40px;
        height: 60px;
    }

    .logo {
        font-size: 26px;
        font-weight: 800;
        background: linear-gradient(135deg, #40e0d0, #00bcd4, #0097a7);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 0 30px rgba(64, 224, 208, 0.3);
    }

    .nav-links {
        display: flex;
        list-style: none;
        gap: 35px;
        margin: 0;
        padding: 0;
    }

        .nav-links li {
            margin: 0;
            padding: 0;
        }

        .nav-links a {
            color: #ffffff;
            text-decoration: none;
            font-weight: 500;
            position: relative;
            transition: all 0.3s ease;
            padding: 12px 20px;
            border-radius: 10px;
            font-size: 16px;
            display: block;
        }

            .nav-links a:hover {
                color: #40e0d0;
                background: rgba(64, 224, 208, 0.1);
                transform: translateY(-2px);
            }

    /* Hero Section */
    .hero {
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
        padding-top: 100px;
    }

    .hero-content {
        text-align: center;
        z-index: 2;
        max-width: 1200px;
        padding: 0 40px;
        position: relative;
    }

    .hero-title {
        font-size: clamp(3rem, 8vw, 7rem);
        font-weight: 900;
        margin-bottom: 30px;
        background: linear-gradient(135deg, #ffffff 0%, #40e0d0 50%, #00bcd4 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 0 50px rgba(64, 224, 208, 0.3);
        animation: title-glow 3s ease-in-out infinite alternate;
        transform: perspective(1000px) rotateX(10deg);
    }

    @@keyframes title-glow {
        from {
            filter: brightness(1) drop-shadow(0 0 20px rgba(64, 224, 208, 0.3));
        }

        to {
            filter: brightness(1.2) drop-shadow(0 0 40px rgba(64, 224, 208, 0.6));
        }
    }

    .hero-subtitle {
        font-size: 1.5rem;
        margin-bottom: 50px;
        color: #b0b0b0;
        font-weight: 300;
        letter-spacing: 1px;
        opacity: 0;
        animation: fadeInUp 1s ease-out 0.5s forwards;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .hero-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 40px;
        margin-top: 80px;
        opacity: 0;
        animation: fadeInUp 1s ease-out 1s forwards;
    }

    .stat-item {
        text-align: center;
        padding: 30px;
        background: rgba(64, 224, 208, 0.05);
        border: 1px solid rgba(64, 224, 208, 0.2);
        border-radius: 16px;
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        transform: translateZ(0);
        position: relative;
        overflow: hidden;
    }

        .stat-item::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, transparent, rgba(64, 224, 208, 0.3), transparent);
            border-radius: 16px;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: -1;
        }

        .stat-item:hover::before {
            opacity: 1;
            animation: rotate-border 2s linear infinite;
        }

        .stat-item:hover {
            transform: translateY(-15px) translateZ(50px);
            background: rgba(64, 224, 208, 0.1);
            box-shadow: 0 25px 50px rgba(64, 224, 208, 0.3);
        }

    @@keyframes rotate-border {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .stat-number {
        font-size: 3rem;
        font-weight: 800;
        color: #40e0d0;
        display: block;
        margin-bottom: 10px;
        text-shadow: 0 0 20px rgba(64, 224, 208, 0.5);
    }

    .stat-label {
        color: #ffffff;
        font-size: 1.1rem;
        font-weight: 500;
    }

    /* Floating Elements */
    .floating-element {
        position: absolute;
        pointer-events: none;
        opacity: 0.1;
        animation: float 6s ease-in-out infinite;
    }

    .floating-element:nth-child(1) {
        top: 20%;
        left: 10%;
        animation-delay: 0s;
    }

    .floating-element:nth-child(2) {
        top: 60%;
        right: 15%;
        animation-delay: 2s;
    }

    .floating-element:nth-child(3) {
        bottom: 30%;
        left: 20%;
        animation-delay: 4s;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        33% { transform: translateY(-20px) rotate(120deg); }
        66% { transform: translateY(20px) rotate(240deg); }
    }

    /* Code Editor Section */
    .code-section {
        padding: 120px 40px;
        background: linear-gradient(180deg, rgba(10, 10, 10, 0.95) 0%, rgba(15, 15, 15, 0.95) 100%);
        position: relative;
        z-index: 1;
    }

    .section-container {
        max-width: 1400px;
        margin: 0 auto;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 80px;
        align-items: center;
    }

    .section-content h2 {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 30px;
        background: linear-gradient(135deg, #ffffff, #40e0d0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .section-content p {
        font-size: 1.2rem;
        color: #b0b0b0;
        margin-bottom: 20px;
        line-height: 1.8;
    }

    .code-editor {
        background: #1e1e1e;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(64, 224, 208, 0.2);
        transform: perspective(1000px) rotateY(-5deg);
        transition: transform 0.3s ease;
    }

    .code-editor:hover {
        transform: perspective(1000px) rotateY(0deg) translateZ(20px);
    }

    .code-header {
        background: #2d2d30;
        padding: 15px 20px;
        display: flex;
        align-items: center;
        gap: 10px;
        border-bottom: 1px solid #3e3e42;
    }

    .code-dots {
        display: flex;
        gap: 8px;
    }

    .dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
    }

        .dot.red {
            background: #ff5f57;
        }

        .dot.yellow {
            background: #ffbd2e;
        }

        .dot.green {
            background: #28ca42;
        }

    .code-title {
        color: #cccccc;
        font-size: 0.9rem;
        margin-left: 15px;
    }

    .code-content {
        padding: 25px;
        font-family: 'Courier New', monospace;
        font-size: 14px;
        line-height: 1.6;
        color: #d4d4d4;
        overflow-x: auto;
    }

    .code-line {
        display: flex;
        margin-bottom: 5px;
    }

    .line-number {
        width: 30px;
        color: #858585;
        user-select: none;
        flex-shrink: 0;
    }

    .code-text {
        color: #d4d4d4;
    }

    .keyword {
        color: #569cd6;
    }

    .string {
        color: #ce9178;
    }

    .comment {
        color: #6a9955;
    }

    .function {
        color: #dcdcaa;
    }

    .number {
        color: #b5cea8;
    }

    /* Features Section */
    .features {
        padding: 120px 40px;
        background: rgba(10, 10, 10, 0.95);
        position: relative;
        z-index: 1;
    }

    .features-container {
        max-width: 1400px;
        margin: 0 auto;
        text-align: center;
    }

    .features h2 {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 60px;
        background: linear-gradient(135deg, #ffffff, #40e0d0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 40px;
        margin-top: 80px;
    }

    .feature-card {
        background: rgba(64, 224, 208, 0.03);
        border: 1px solid rgba(64, 224, 208, 0.15);
        border-radius: 20px;
        padding: 40px;
        transition: all 0.4s ease;
        position: relative;
        overflow: hidden;
        transform: translateZ(0);
    }

        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(64, 224, 208, 0.1), transparent);
            transition: left 0.6s ease;
        }

        .feature-card:hover::before {
            left: 100%;
        }

        .feature-card:hover {
            transform: translateY(-15px) translateZ(30px);
            background: rgba(64, 224, 208, 0.08);
            border-color: rgba(64, 224, 208, 0.3);
            box-shadow: 0 25px 50px rgba(64, 224, 208, 0.2);
        }

    .feature-icon {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, #40e0d0, #00bcd4);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 25px;
        font-size: 2rem;
        animation: icon-float 3s ease-in-out infinite;
    }

    @@keyframes icon-float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-5px); }
    }

    .feature-card h3 {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 20px;
        color: #ffffff;
    }

    .feature-card p {
        color: #b0b0b0;
        line-height: 1.7;
    }

    /* CTA Section */
    .cta {
        padding: 120px 40px;
        background: linear-gradient(135deg, rgba(64, 224, 208, 0.1), rgba(0, 188, 212, 0.05));
        text-align: center;
        position: relative;
        z-index: 1;
    }

    .cta-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .cta h2 {
        font-size: 3rem;
        font-weight: 800;
        margin-bottom: 30px;
        color: #ffffff;
    }

    .cta p {
        font-size: 1.3rem;
        color: #b0b0b0;
        margin-bottom: 50px;
    }

    .cta-buttons {
        display: flex;
        gap: 30px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn {
        padding: 18px 40px;
        border: none;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }

        .btn:hover::before {
            left: 100%;
        }

    .btn-primary {
        background: linear-gradient(135deg, #40e0d0, #00bcd4);
        color: #ffffff;
    }

        .btn-primary:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 15px 30px rgba(64, 224, 208, 0.4);
        }

    .btn-secondary {
        background: transparent;
        color: #40e0d0;
        border: 2px solid #40e0d0;
    }

        .btn-secondary:hover {
            background: #40e0d0;
            color: #0a0a0a;
            transform: translateY(-3px) scale(1.05);
        }

    /* Responsive */
    @@media (max-width: 768px) {
        .navbar {
            padding: 15px 0;
        }

        .nav-container {
            padding: 0 20px;
            height: 50px;
        }

        .logo {
            font-size: 22px;
        }

        .nav-links {
            gap: 25px;
        }

            .nav-links a {
                padding: 10px 15px;
                font-size: 15px;
            }

        .hero {
            padding-top: 80px;
        }

        .hero-content {
            padding: 0 20px;
        }

        .section-container {
            grid-template-columns: 1fr;
            gap: 60px;
        }

        .hero-stats {
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .features-grid {
            grid-template-columns: 1fr;
        }

        .cta-buttons {
            flex-direction: column;
            align-items: center;
        }

        .code-section, .features, .cta {
            padding: 80px 20px;
        }

        .code-editor {
            transform: none;
        }
    }

    @@media (max-width: 480px) {
        .navbar {
            padding: 12px 0;
        }

        .nav-container {
            height: 45px;
        }

        .logo {
            font-size: 20px;
        }

        .hero {
            padding-top: 70px;
        }

        .hero-title {
            font-size: 2.5rem;
        }

        .section-content h2, .features h2 {
            font-size: 2.5rem;
        }

        .nav-links {
            display: none;
        }
    }

    /* Mouse cursor effect */
    .cursor-glow {
        position: fixed;
        width: 20px;
        height: 20px;
        background: radial-gradient(circle, rgba(64, 224, 208, 0.6) 0%, transparent 70%);
        border-radius: 50%;
        pointer-events: none;
        z-index: 9999;
        mix-blend-mode: screen;
        transition: transform 0.1s ease;
    }
</style>

<!-- Canvas per effetti 3D -->
<canvas id="canvas3d"></canvas>

@section Scripts {
    <script>
        class NeuralNetwork3D {
            constructor() {
                this.canvas = document.getElementById('canvas3d');
                if (!this.canvas) return console.error('Canvas non trovato!');
                this.ctx = this.canvas.getContext('2d');
                this.particles = [];
                this.mouse = { x: 0, y: 0 };
                this.setupCanvas();
                this.createParticles();
                console.log('Particles:', this.particles.length);
                this.setupEventListeners();
                requestAnimationFrame(this.animate.bind(this));
            }
            setupCanvas() {
                const resize = () => {
                    this.canvas.width = innerWidth;
                    this.canvas.height = innerHeight;
                    this.cx = this.canvas.width / 2;
                    this.cy = this.canvas.height / 2;
                };
                resize();
                window.addEventListener('resize', resize);
            }
            createParticles() {
                const count = Math.min(80, Math.floor(innerWidth / 25));
                for (let i = 0; i < count; i++) {
                    this.particles.push({
                        x: Math.random() * innerWidth,
                        y: Math.random() * innerHeight,
                        z: Math.random() * 900 - 450,
                        vx: (Math.random() - 0.5) * 0.5,
                        vy: (Math.random() - 0.5) * 0.5,
                        vz: (Math.random() - 0.5) * 0.3,
                        size: Math.random() * 3 + 1,
                        brightness: Math.random() * 0.8 + 0.2,
                        pulseSpeed: Math.random() * 0.02 + 0.01,
                        pulseOffset: Math.random() * Math.PI * 2
                    });
                }
            }
            setupEventListeners() {
                this.canvas.addEventListener('mousemove', e => {
                    this.mouse.x = e.clientX;
                    this.mouse.y = e.clientY;
                });
            }
            updateParticles(t) {
                this.particles.forEach(p => {
                    p.x += p.vx; p.y += p.vy; p.z += p.vz;
                    if (p.x < -50) p.x = innerWidth + 50;
                    if (p.x > innerWidth + 50) p.x = -50;
                    if (p.y < -50) p.y = innerHeight + 50;
                    if (p.y > innerHeight + 50) p.y = -50;
                    if (p.z < -450) p.z = 450; if (p.z > 450) p.z = -450;
                    p.brightness = 0.3 + Math.sin(t * p.pulseSpeed + p.pulseOffset) * 0.4;
                });
            }
            project(p) {
                const fov = 500, z = Math.min(Math.max(p.z, -fov + 1), fov);
                const s = fov / (fov + z);
                return { x: p.x * s + this.cx, y: p.y * s + this.cy, size: p.size * s, brightness: p.brightness };
            }
            drawConnections() {
                this.ctx.beginPath();
                this.particles.forEach((p1, i) => {
                    const a = this.project(p1);
                    for (let j = i + 1; j < this.particles.length; j++) {
                        const b = this.project(this.particles[j]);
                        const d = Math.hypot(a.x - b.x, a.y - b.y);
                        if (d < 200) {
                            this.ctx.strokeStyle = `rgba(64,224,208,${(200 - d) / 200 * 0.3})`;
                            this.ctx.moveTo(a.x, a.y);
                            this.ctx.lineTo(b.x, b.y);
                        }
                    }
                });
                this.ctx.stroke();
            }
            drawParticles() {
                this.particles.forEach(p => {
                    const pr = this.project(p);
                    this.ctx.beginPath();
                    this.ctx.arc(pr.x, pr.y, pr.size, 0, Math.PI * 2);
                    this.ctx.fillStyle = `rgba(64,224,208,${pr.brightness})`;
                    this.ctx.fill();
                });
            }
            animate(ts = 0) {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.updateParticles(ts / 1000);
                this.drawConnections();
                this.drawParticles();
                requestAnimationFrame(this.animate.bind(this));
            }
        }
        window.onload = () => new NeuralNetwork3D();
    </script>
}


<!-- Cursor glow effect -->
<div class="cursor-glow"></div>

<!-- Navigation -->
<nav class="navbar">
    <div class="nav-container">
        <div class="logo">AI Innovation</div>
        <ul class="nav-links">
            <li><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li><a href="@Url.Action("Approfondimenti", "Home")">Approfondimenti</a></li>
            <li><a href="@Url.Action("ContactUs", "Home")">Contact Us</a></li>
        </ul>
    </div>
</nav>

<!-- Hero Section -->
<section class="hero">
    <!-- Floating geometric elements -->
    <div class="floating-element" style="font-size: 4rem; color: rgba(64, 224, 208, 0.1);">◆</div>
    <div class="floating-element" style="font-size: 3rem; color: rgba(64, 224, 208, 0.1);">▲</div>
    <div class="floating-element" style="font-size: 5rem; color: rgba(64, 224, 208, 0.1);">●</div>

    <div class="hero-content">
        <h1 class="hero-title">Artificial Intelligence</h1>
        <p class="hero-subtitle">Rivoluzionando il futuro attraverso l'intelligenza computazionale avanzata</p>

        <div class="hero-stats">
            <div class="stat-item">
                <span class="stat-number">175B</span>
                <span class="stat-label">Parametri AI</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">96%</span>
                <span class="stat-label">Precisione</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">2.8M</span>
                <span class="stat-label">Operazioni/sec</span>
            </div>
            <div class="stat-item">
                <span class="stat-number">45TB</span>
                <span class="stat-label">Dataset Training</span>
            </div>
        </div>
    </div>
</section>

<!-- Code Editor Section -->
<section class="code-section">
    <div class="section-container">
        <div class="section-content">
            <h2>Neural Networks</h2>
            <p>Esplora l'architettura delle reti neurali profonde che stanno ridefinendo i confini dell'intelligenza artificiale. Dai transformer ai modelli generativi, ogni linea di codice rappresenta un passo verso il futuro.</p>
            <p>L'evoluzione dell'AI non è solo tecnologia, ma una nuova forma di intelligenza che apprende, si adatta e supera i limiti umani in compiti sempre più complessi.</p>
        </div>

        <div class="code-editor">
            <div class="code-header">
                <div class="code-dots">
                    <div class="dot red"></div>
                    <div class="dot yellow"></div>
                    <div class="dot green"></div>
                </div>
                <div class="code-title">neural_network.py</div>
            </div>
            <div class="code-content">
                <div class="code-line">
                    <span class="line-number">1</span>
                    <span class="code-text"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span>
                </div>
                <div class="code-line">
                    <span class="line-number">2</span>
                    <span class="code-text"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span>
                </div>
                <div class="code-line">
                    <span class="line-number">3</span>
                    <span class="code-text"></span>
                </div>
                <div class="code-line">
                    <span class="line-number">4</span>
                    <span class="code-text"><span class="comment"># Advanced Transformer Architecture</span></span>
                </div>
                <div class="code-line">
                    <span class="line-number">5</span>
                    <span class="code-text"><span class="keyword">class</span> <span class="function">MultiHeadAttention</span>(tf.keras.layers.Layer):</span>
                </div>
                <div class="code-line">
                    <span class="line-number">6</span>
                    <span class="code-text">    <span class="keyword">def</span> <span class="function">__init__</span>(self, d_model, num_heads):</span>
                </div>
                <div class="code-line">
                    <span class="line-number">7</span>
                    <span class="code-text">        super().__init__()</span>
                </div>
                <div class="code-line">
                    <span class="line-number">8</span>
                    <span class="code-text">        self.d_model = d_model</span>
                </div>
                <div class="code-line">
                    <span class="line-number">9</span>
                    <span class="code-text">        self.num_heads = num_heads</span>
                </div>
                <div class="code-line">
                    <span class="line-number">10</span>
                    <span class="code-text">        </span>
                </div>
                <div class="code-line">
                    <span class="line-number">11</span>
                    <span class="code-text">    <span class="keyword">def</span> <span class="function">call</span>(self, query, key, value):</span>
                </div>
                <div class="code-line">
                    <span class="line-number">12</span>
                    <span class="code-text">        attention_weights = tf.nn.softmax(</span>
                </div>
                <div class="code-line">
                    <span class="line-number">13</span>
                    <span class="code-text">            tf.matmul(query, key, transpose_b=<span class="keyword">True</span>)</span>
                </div>
                <div class="code-line">
                    <span class="line-number">14</span>
                    <span class="code-text">        )</span>
                </div>
                <div class="code-line">
                    <span class="line-number">15</span>
                    <span class="code-text">        <span class="keyword">return</span> tf.matmul(attention_weights, value)</span>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Features Section -->
<section class="features">
    <div class="features-container">
        <h2>Tecnologie Emergenti</h2>

        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">🧠</div>
                <h3>Deep Learning</h3>
                <p>Reti neurali profonde che simulano il funzionamento del cervello umano, capaci di riconoscere pattern complessi e prendere decisioni intelligenti in tempo reale.</p>
            </div>

            <div class="feature-card">
                <div class="feature-icon">🔮</div>
                <h3>Predictive Analytics</h3>
                <p>Algoritmi avanzati che analizzano dati storici per predire tendenze future con precisione millimetrica, rivoluzionando il processo decisionale.</p>
            </div>

            <div class="feature-card">
                <div class="feature-icon">⚡</div>
                <h3>Real-time Processing</h3>
                <p>Elaborazione di milioni di dati al secondo attraverso architetture distribuite e computing edge, garantendo risposte istantanee.</p>
            </div>

            <div class="feature-card">
                <div class="feature-icon">🚀</div>
                <h3>Quantum Computing</h3>
                <p>L'integrazione con i computer quantistici apre nuove frontiere nell'ottimizzazione e nella risoluzione di problemi computazionalmente complessi.</p>
            </div>

            <div class="feature-card">
                <div class="feature-icon">🎯</div>
                <h3>Autonomous Systems</h3>
                <p>Sistemi completamente autonomi che apprendono, si adattano e migliorano continuamente le proprie prestazioni senza intervento umano.</p>
            </div>

            <div class="feature-card">
                <div class="feature-icon">🌐</div>
                <h3>Global Intelligence</h3>
                <p>Intelligenza distribuita su scala globale che coordina risorse e conoscenze per risolvere sfide planetarie complesse.</p>
            </div>
        </div>
    </div>
</section>

<!-- CTA Section -->
<section class="cta">
    <div class="cta-container">
        <h2>Il Futuro è Oggi</h2>
        <p>Unisciti alla rivoluzione dell'intelligenza artificiale e scopri come la tecnologia può trasformare il tuo mondo.</p>

        <div class="cta-buttons">
            <a href="@Url.Action("Approfondimenti", "Home")" class="btn btn-primary">Esplora Tecnologie</a>
            <a href="@Url.Action("ContactUs", "Home")" class="btn btn-secondary">Inizia Progetto</a>
        </div>
    </div>
</section>




